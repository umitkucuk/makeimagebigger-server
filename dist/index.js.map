{"version":3,"sources":["../src/index.js"],"names":["channels","app","server","http","createServer","use","bodyParser","json","storage","multer","diskStorage","destination","req","file","cb","filename","originalname","upload","limits","files","fileFilter","match","Error","res","next","io","get","send","post","single","image","status","data","message","name","mimetype","size","error","imageName","query","sendFile","path","join","__dirname","images","body","forEach","fs","stat","err","stats","console","unlink","log","listen","process","env","PORT","address","port","on","socket","channelId","emit","channel","channel_id","users","username","push","find","length","to"],"mappings":"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","sourcesContent":["import express from 'express'\r\nimport bodyParser from 'body-parser'\r\nimport socket from 'socket.io'\r\nimport cors from 'cors'\r\nimport multer from 'multer'\r\nimport morgan from 'morgan'\r\nimport fs from 'fs'\r\nimport path from 'path'\r\nimport http from 'http'\r\n\r\nlet channels = []\r\n\r\nconst app = express()\r\nconst server = http.createServer(app)\r\n\r\napp.use(cors('*'))\r\napp.use(bodyParser.json())\r\napp.use(morgan('dev'))\r\n\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, './uploads')\r\n  },\r\n  filename: (req, file, cb) => {\r\n    // const uniqueSuffix = Math.round(Math.random() * 1e9)\r\n    // cb(null, file.originalname + '-' + uniqueSuffix)\r\n    cb(null, file.originalname)\r\n  },\r\n})\r\n\r\nconst upload = multer({\r\n  storage: storage,\r\n  limits: {\r\n    files: 5,\r\n    // fieldSize: 2 * 1024 * 1024, // 2 MB (max file size)\r\n  },\r\n  fileFilter: (req, file, cb) => {\r\n    // allow images only\r\n    if (!file.originalname.match(/\\.(jpg|jpeg|png)$/)) {\r\n      return cb(new Error('Only image are allowed.'), false)\r\n    }\r\n    cb(null, true)\r\n  },\r\n})\r\n\r\napp.use((req, res, next) => {\r\n  req.io = io\r\n  next()\r\n})\r\n\r\napp.get('/', (req, res) => {\r\n  res.send('hello from the server')\r\n})\r\n\r\napp.post('/upload-image', upload.single('image'), async (req, res) => {\r\n  try {\r\n    const image = req.file\r\n    if (!image) {\r\n      res.status(400).send({\r\n        status: false,\r\n        data: 'No file is selected.',\r\n      })\r\n    } else {\r\n      res.send({\r\n        status: true,\r\n        message: 'File is uploaded.',\r\n        data: {\r\n          name: image.originalname,\r\n          mimetype: image.mimetype,\r\n          size: image.size,\r\n        },\r\n      })\r\n    }\r\n  } catch (error) {\r\n    res.status(500).send(error)\r\n  }\r\n})\r\n\r\napp.get('/get-image', (req, res) => {\r\n  const imageName = req.query.imageName\r\n  res.sendFile(path.join(__dirname, '../uploads/' + imageName))\r\n})\r\n\r\napp.post('/delete-images', (req, res) => {\r\n  const images = req.body.images\r\n\r\n  images.forEach((image) => {\r\n    fs.stat('./server/upload/my.csv', function (err, stats) {\r\n      if (err) {\r\n        return console.error(err)\r\n      }\r\n\r\n      fs.unlink(`./uploads/${image}`, (err) => {\r\n        if (err) {\r\n          throw err\r\n        } else {\r\n          return\r\n          console.log('Successfully deleted files.')\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  return true\r\n})\r\n\r\nserver.listen(process.env.PORT || 8000, () => {\r\n  console.log('Server is running on port', server.address().port)\r\n})\r\n\r\nconst io = socket(server)\r\n\r\nio.on('connection', (socket) => {\r\n  socket.on('connect', (channelId) => {\r\n    io.emit('CONNECTION', 'hello')\r\n    console.log(channelId)\r\n  })\r\n\r\n  socket.on('CREATE_CHANNEL', (data) => {\r\n    if (!data.channelId) return null\r\n\r\n    const channel = {\r\n      channel_id: data.channelId,\r\n      users: [data.username],\r\n    }\r\n\r\n    socket.join(data.channelId, () => {})\r\n\r\n    channels.push(channel)\r\n  })\r\n\r\n  socket.on('JOIN_CHANNEL', (channelId) => {\r\n    if (!channelId) return null\r\n\r\n    const channel = channels.find((channel) => channel.channel_id === channelId)\r\n\r\n    // if channel has already 2 connections\r\n    if (channel.users.length > 1) {\r\n      throw new Error('Channel is full')\r\n    }\r\n\r\n    socket.join(channelId, () => {\r\n      socket.emit('connect', channelId)\r\n    })\r\n  })\r\n\r\n  socket.on('LEAVE_CHANNEL', (channelId) => {\r\n    io.to(channelId).emit('LEAVE_CHANNEL', true)\r\n  })\r\n\r\n  socket.on('SEND_IMAGE', (data) => {\r\n    io.to(data.channel_id).emit('SEND_IMAGE', data.image)\r\n  })\r\n\r\n  socket.on('disconnect', () => {\r\n    io.emit('disconnect', true)\r\n  })\r\n})\r\n"],"file":"index.js"}