{"version":3,"sources":["../src/index.js"],"names":["channels","app","use","bodyParser","json","server","listen","console","log","address","port","io","req","res","next","get","send","channelRouter","on","socket","channelId","emit","data","channel","channel_id","users","username","join","push","find","length","Error","to","image"],"mappings":"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","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport socket from 'socket.io'\nimport cors from 'cors'\n\nimport channelRouter from './routes/channelRouter'\n\nlet channels = []\n\nconst app = express()\napp.use(bodyParser.json())\napp.use(cors())\n\n// 192.168.1.101\n\nconst server = app.listen(8080, '0.0.0.0', () => {\n  console.log('Server is running on port', server.address().port)\n})\n\nconst io = socket(server)\n\napp.use((req, res, next) => {\n  req.io = io\n  next()\n})\n\napp.get('/', (req, res) => {\n  res.send('hello world')\n})\n\napp.use('/channel', channelRouter)\n\nio.on('connection', socket => {\n  socket.on('connect', channelId => {\n    io.emit('CONNECTION', 'hello')\n    console.log(channelId)\n  })\n\n  socket.on('CREATE_CHANNEL', data => {\n    if (!data.channelId) return null\n\n    const channel = {\n      channel_id: data.channelId,\n      users: [data.username],\n    }\n\n    socket.join(data.channelId, () => {})\n\n    channels.push(channel)\n  })\n\n  socket.on('JOIN_CHANNEL', channelId => {\n    if (!channelId) return null\n\n    const channel = channels.find(channel => channel.channel_id === channelId)\n\n    // if channel has already 2 connections\n    if (channel.users.length > 1) {\n      throw new Error('Channel is full')\n    }\n\n    socket.join(channelId, () => {\n      socket.emit('connect', channelId)\n    })\n  })\n\n  socket.on('LEAVE_CHANNEL', channelId => {\n    console.log(channelId)\n    io.to(channelId).emit('LEAVE_CHANNEL', true)\n  })\n\n  socket.on('SEND_IMAGE', data => {\n    io.to(data.channel_id).emit('SEND_IMAGE', data.image)\n  })\n\n  socket.on('disconnect', () => {\n    console.log('user disconnect')\n    io.emit('disconnect', true)\n  })\n})\n"],"file":"index.js"}